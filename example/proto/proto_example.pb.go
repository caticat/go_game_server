// Code generated by protoc-gen-go.
// source: proto_example.proto
// DO NOT EDIT!

package ProtoExample

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HelloReq struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *HelloReq) Reset()                    { *m = HelloReq{} }
func (m *HelloReq) String() string            { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()               {}
func (*HelloReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *HelloReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type HelloAck struct {
	Error ErrorCode `protobuf:"varint,1,opt,name=error,enum=ProtoExample.ErrorCode" json:"error,omitempty"`
	Msg   string    `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *HelloAck) Reset()                    { *m = HelloAck{} }
func (m *HelloAck) String() string            { return proto.CompactTextString(m) }
func (*HelloAck) ProtoMessage()               {}
func (*HelloAck) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *HelloAck) GetError() ErrorCode {
	if m != nil {
		return m.Error
	}
	return ErrorCode_OK
}

func (m *HelloAck) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloReq)(nil), "ProtoExample.HelloReq")
	proto.RegisterType((*HelloAck)(nil), "ProtoExample.HelloAck")
}

func init() { proto.RegisterFile("proto_example.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0x8f, 0x4f, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x03, 0xf3, 0x84, 0x78, 0x02, 0x40,
	0x94, 0x2b, 0x44, 0x4c, 0x4a, 0x10, 0xaa, 0xa4, 0xa8, 0x28, 0xbf, 0x08, 0xa2, 0x40, 0x49, 0x86,
	0x8b, 0xc3, 0x23, 0x35, 0x27, 0x27, 0x3f, 0x28, 0xb5, 0x50, 0x48, 0x80, 0x8b, 0x39, 0xb7, 0x38,
	0x5d, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc4, 0x54, 0xf2, 0x86, 0xca, 0x3a, 0x26, 0x67,
	0x0b, 0xe9, 0x72, 0xb1, 0x82, 0x35, 0x82, 0xe5, 0xf9, 0x8c, 0xc4, 0xf5, 0x90, 0x8d, 0xd6, 0x73,
	0x05, 0x49, 0x39, 0xe7, 0xa7, 0xa4, 0x06, 0x41, 0x54, 0xc1, 0x0c, 0x63, 0x82, 0x1b, 0x96, 0xc4,
	0x06, 0xb6, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x59, 0x83, 0x6c, 0x57, 0xa9, 0x00, 0x00,
	0x00,
}
